<form method="get" action="{{return_to}}" id="configform">
<h2>Configure</h2>
<fieldset>
<legend>Units</legend>
<p>Show distance in meters/kilometers, yards/miles or nautical miles?</p>
<label class="long"><input type="radio" name="units" value="metric" id="metric" checked="checked" /> Metric (m, km)</label><br />
<label class="long"><input type="radio" name="units" value="imperial" id="imperial" /> Imperial (y, mi)</label><br />
<label class="long"><input type="radio" name="units" value="nautical" id="nautical" /> Nautical (nm)</label>
</fieldset>
<fieldset>
<legend>Update interval</legend>
<p>How often location should be checked? (More often consumes more battery.)</p>
<select name="interval">
<option value="0">Automatic</option>
<option value="1">Once a second</option>
<option value="2">Every 2 seconds</option>
<option value="5">Every 5 seconds</option>
<option value="10">Every 10 seconds</option>
<option value="30">Every 30 seconds</option>
<option value="60">Once a minute</option>
</select>
</fieldset>
<fieldset>
<legend>Compass sensitivity</legend>
<p>How fast the app should react to changes in compass heading?</p>
<label class="short"><input type="radio" name="sens" value="1" id="fast" /> Fast</label>
<label class="short"><input type="radio" name="sens" value="5" id="normal" checked="checked" /> Normal</label>
<label class="short"><input type="radio" name="sens" value="10" id="slow" /> Slow</label>
</fieldset>
<input type="submit" value="Save configuration" />
</form>
<div id="support">
<h2>Support</h2>
<ul>
<li>Everything not working as expected? See <a href="/{{userToken}}/?timelineToken={{conf.timelineToken}}#troubleshooting">troubleshooting</a>.</li>
<li>Like the app? Consider <a href="/{{userToken}}/?timelineToken={{conf.timelineToken}}#support">a small donation to the developer</a>.</li>
</ul>
</div>
<form method="post" action="place/new" id="add">
<h2>Add new place manually</h2>
<fieldset>
<p>Here you can set a target by entering name and coordinates manually. The targets are
pushed to your timeline (to current time). They won't replace your current target until
you select them from the timeline.</p>
<div>
 <label for="name" id="namelabel">Name:</label> <input id="name" name="name" type="text" size="40" />
</div>
<div>
 <label for="lat">Latitude:</label> <input id="lat" name="latitude" type="number" step="any" min="-90.0" max="90.0" />
 <label for="lon">Longitude:</label> <input id="lon" name="longitude" type="number" step="any" min="-180.0" max="180.0" />
</div>
<input type="submit" value="Send" />
</fieldset>
</form>
<h2>Add place from Android App</h2>
<p>Install <a href="https://play.google.com/store/apps/details?id=caller.pebble.mapper">GBIT Map Share for Pebble</a> by Ben Caller and select your target from Google Maps.</p>
<div id="tok"></div>
<script>
 var chosenPos;
 var f = document.getElementById('configform');
 var tokenDiv = document.getElementById('tok');
 f.onsubmit = sendConfig;
 var imp = document.getElementById('imperial');
 var nau = document.getElementById('nautical');
 var met = document.getElementById('metric');
 var fa = document.getElementById('fast');
 var no = document.getElementById('normal');
 var sl = document.getElementById('slow');
 var months = ['Jan', 'Feb', 'Mar', 'Apr', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
 var conf;
 var userToken = '{{userToken}}';
 var timelineToken;
 var af = document.getElementById('add');
 if (userToken == '-') {
  var msg = 'Warning! Your account token is unknown. Please save your current settings and reopen this configuration page in order to add places.';
  var div = document.createElement('div');
  div.className = 'warning';
  div.appendChild(document.createTextNode(msg));
  af.appendChild(div);
 }
 var json = getQueryParam('conf');
 if (json && (json.charAt(0) == '{')) {
  conf = JSON.parse(json);
 }
 else {
  // console.log('Invalid config ' + json);
 }
 if (conf) {
  if (!conf.interval && (/(iPad|iPhone|iPod)/g.test(navigator.userAgent))) {
    conf.interval = 5;
  }
  timelineToken = conf.timelineToken || '';
  if (conf.units == 'imperial') {
   document.getElementById('imperial').checked = true;
  }
  else if (conf.units == 'nautical') {
   document.getElementById('nautical').checked = true;
  }
  for (var i=0; i<f.interval.options.length; i++) {
   var opt = f.interval.options[i];
   if (opt.value == conf.interval) {
    opt.selected = true;
   }
  }
  if (conf.sens < 4) {
   document.getElementById('fast').checked = true;
  }
  else if (conf.sens > 6) {
   document.getElementById('slow').checked = true;
  }
 }
 if (userToken) {
  af.onsubmit = function(e) {
   e.preventDefault();
   var obj = {
    "position": {
      "coords": {
       "latitude": parseFloat(af.lat.value),
       "longitude": parseFloat(af.lon.value)
      }
    },
    "timelineToken": timelineToken,
    "pin": {
     "layout": {
      "type": "genericPin",
      "tinyIcon": "system://images/NOTIFICATION_FLAG",
      "title": af.name.value,
      "subtitle": "Get Back in Time",
      "body": "Set from config page."
     }
    }
   };
   var req = new XMLHttpRequest();
   req.onload = function() {
    // console.log(this.responseText);
    var div = document.createElement('div');
    div.className = 'result error';
    var msg = 'Error pushing to database!';
    if ((this.status == 200) && (this.responseText.substr(0, 1) == '{')) {
     var obj = JSON.parse(this.responseText);
     var t = document.getElementById('locationhistory');
     if (t) {
      if (t.hasChildNodes() && t.childNodes[1]) {
       t.insertBefore(place2tr(obj), t.childNodes[1]);
      }
      else {
       t.appendChild(place2tr(obj));
      }
     }
     if (obj.pin && obj.pin.layout && obj.pin.layout.title) {
      div.className = 'result ok';
      msg = 'Added place ' + obj.pin.layout.title + ' to database!';
     }
     else if (obj) {
      div.className = 'result ok';
      msg = 'Added place to database!';
     }
    }
    else {
     msg += ' (' + this.responseText + ')';
    }
    div.appendChild(document.createTextNode(msg));
    af.appendChild(div);
   };
   req.open(af.method, af.action, true);
   req.setRequestHeader('Content-Type', 'application/json');
   // console.log(JSON.stringify(obj));
   req.send(JSON.stringify(obj));
  };
  getPosition();
  getHistory();
  setTokens();

  function setTokens() {
   af.style.display = 'block';
   var h = document.createElement('h2');
   h.appendChild(document.createTextNode('Add places using the API'));
   tokenDiv.appendChild(h);
   var p = document.createElement('p');
   var a = document.createElement('a');
   a.appendChild(document.createTextNode('See API manual'));
   a.href = '/' + userToken + '/?timelineToken=' + timelineToken;
   p.appendChild(a);
   tokenDiv.appendChild(p);
   if (userToken && (userToken != '-')) {
    var text = document.createTextNode('Your Pebble account token is ');
    var tt = document.createElement('tt');
    tt.appendChild(document.createTextNode(userToken));
    p = document.createElement('p');
    p.appendChild(text);
    p.appendChild(tt);
    p.appendChild(document.createTextNode(' '));
    tokenDiv.appendChild(p);
    if (timelineToken) {
     p = document.createElement('p');
     var text = document.createTextNode('Your Pebble timeline token is ');
     var tt = document.createElement('tt');
     tt.appendChild(document.createTextNode(timelineToken));
     p = document.createElement('p');
     p.appendChild(text);
     p.appendChild(tt);
     p.appendChild(document.createTextNode(' '));
     tokenDiv.appendChild(p);
    }
    p = document.createElement('p');
    a = document.createElement('a');
    a.href = 'mailto:?subject=Pebble%20account%20Token&body=' +
     'Your%20Pebble%20account%20token%20is%20' + userToken;
    if (timelineToken) {
     a.href += '%20and%20your%20Pebble%20timeline%20token%20is%20' + timelineToken;
    }
    a.appendChild(document.createTextNode('Send token' + (timelineToken ? 's' : '') + ' by mail'));
    p.appendChild(a);
    p.appendChild(document.createTextNode(' (or just save as draft from which you can copy and paste)'));
    tokenDiv.appendChild(p);
   }
   tokenDiv.style.display = 'block';
  }

  function getPosition() {
   if (!af.lat.value) {
    navigator.geolocation.getCurrentPosition(function(pos) {
     af.lat.value = pos.coords.latitude;
     af.lon.value = pos.coords.longitude;
    },
    function(err) {
      console.log(err);
    },
    {timeout: 15000, maximumAge: 5000, enableHighAccuracy: true });
   }
  }
  function getHistory() {
   // get token's history
   var req = new XMLHttpRequest();
   req.onload = function() {
    if ((this.status == 200) && (this.responseText.substr(0, 1) == '[')) {
     var places = JSON.parse(this.responseText);
     if (places && places.length) {
      var div = document.createElement('div');
      div.className = 'history';
      var h2 = document.createElement('h2');
      h2.appendChild(document.createTextNode('Location history'));
      div.appendChild(h2);
      var t = document.createElement('table');
      t.id = 'locationhistory';
      var tr = document.createElement('tr');
      var th = document.createElement('th');
      th.appendChild(document.createTextNode('Time'));
      tr.appendChild(th);
      th = document.createElement('th');
      th.className = 'name';
      th.appendChild(document.createTextNode('Name'));
      tr.appendChild(th);
      th = document.createElement('th');
      th.appendChild(document.createTextNode('Coordinates'));
      th.className = 'coords';
      tr.appendChild(th);
      th = document.createElement('th');
      th.appendChild(document.createTextNode('Options'));
      tr.appendChild(th);
      t.appendChild(tr);
      for (var i=0; i<places.length; i++) {
       if (!places[i]) {
        continue;
       }
       t.appendChild(place2tr(places[i]));
      }
      div.appendChild(t);
      tokenDiv.appendChild(div);
      // tokenDiv.parentNode.insertBefore(div, tokenDiv.parentNode.lastChild);
     }
    }
   };
   req.open('GET', '/' + userToken + '/places/20');
   req.send();
  }
 }
 function place2tr(place) {
  var tr = document.createElement('tr');
  var td = document.createElement('td');
  td.className = 'time';
  if (place.time) {
   var d = new Date(place.time);
   var dStr = months[d.getMonth()] + ' ' +
              d.getDate() + ' ' +
              d.getHours() + ':' +
              (d.getMinutes() < 10 ? '0' : '') +
              d.getMinutes() + ' ';
   td.appendChild(document.createTextNode(dStr));
  }
  tr.appendChild(td);
  td = document.createElement('td');
  td.className = 'name';
  if (place.pin && place.pin.layout && place.pin.layout.title) {
   td.appendChild(document.createTextNode(place.pin.layout.title));
  }
  tr.appendChild(td);
  td = document.createElement('td');
  td.className = 'coords';
  if (place.position && place.position.coords) {
   var latlon = Math.round(place.position.coords.latitude*10000)/10000 + ', ' +
                Math.round(place.position.coords.longitude*10000)/10000;
   td.appendChild(document.createTextNode(latlon));
  }
  tr.appendChild(td);
  td = document.createElement('td');
  td.className = 'opts';
  var b = document.createElement('button');
  b.appendChild(document.createTextNode('Get Back'));
  b.setAttribute('data-position', latlon);
  b.onclick = sendMe;
  td.appendChild(b);
  b = document.createElement('button');
  b.appendChild(document.createTextNode('Delete'));
  b.setAttribute('data-id', place._id);
  b.onclick = deleteMe;
  td.appendChild(b);
  tr.appendChild(td);
  return tr;
 }
 function sendMe() {
  chosenPos = this.getAttribute('data-position');
  var e = {preventDefault: function() {}};
  sendConfig(e);
 }
 function deleteMe() {
  id = this.getAttribute('data-id');
  var req = new XMLHttpRequest();
  req.open('DELETE', '/' + userToken + '/place/' + id);
  req.onload = function() {
   if ((this.status == 200) && (this.responseText.substr(0, 1) == '{')) {
    var result = JSON.parse(this.responseText);
    console.log(result);
    var id = result.deleted_id;
    var trs = document.getElementsByTagName('tr');
    for (var i=0; i<trs.length; i++) {
     var db = trs[i].getElementsByTagName('button')[1];
     if (db && (db.getAttribute('data-id') == id)) {
       trs[i].parentNode.removeChild(trs[i]);
     }
    }
   }
  }
  req.send();
 }
 function sendConfig(e) {
  e.preventDefault();
  var units = met.value;
  if (imp.checked) {
    units = imp.value;
  }
  if (nau.checked) {
    units = nau.value;
  }
  var config = {
   units: units,
   interval: f.interval[f.interval.selectedIndex].value,
   sens: 5
  };
  if (fa.checked) {
    config.sens = fa.value;
  }
  if (sl.checked) {
    config.sens = sl.value;
  }
  if (chosenPos) {
   config.chosenPos = chosenPos;
  }
  // console.log(config);
  location.href = '{{return_to}}' + encodeURIComponent(JSON.stringify(config));
  return false;
 }
 function getQueryParam(variable) {
  var query = location.search.substring(1);
  var vars = query.split('&');
  for (var i=vars.length-1; i>=0; i--) {
   var pair = vars[i].split('=');
   if (pair[0] == variable) {
    return decodeURIComponent(pair[1]);
   }
  }
  return false;
 }
</script>
